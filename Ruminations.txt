So I could make a working set of commands quickly and then optimise it.

Quick1: swap the top two and then rotate to the next things that need to be swapped

The thing is that reverse order takes a while to solve. If I can find a way to solve reverse parts quickly that would help.

Splitting the problem into smaller problems would be really helpful.
The second stack helps with this but the problem is I only have one extra stack.

GUARANTEE:
if the first element is distance N away from the start at least N operations are necessary.
(distance is measured through the least amount of ra or rra necessary)
It's fairly easy to translate the stack's shuffle of 0 upto N - 1. while any solution for this is still a solution for the original.

MAYBE:
Get all the properly ordered stuff into stack B while always swapping things into order if two (adjacent?) out of order elements are
at the front of the stack.
Maybe do this untill meeting the first element?

PLAN1:
STEP1:
Figure out the shortest way to the lowest number in A and rotate to is while always swapping things into order if possible
STEP2:
Check if stack A is ordered if yes, STEP5. Else, STEP3.
STEP3:
Pushing everything that's in order. go to STEP1
STEP4:
Check if stack A is ordered if yes, STEP5. Else, STEP1.
STEP5:
push everything back to A. DONE

PROBLEM: what if rra == ra in terms of distance?


TRYING OUT PLAN1:
/PLAN1		3 2 1 4 5 6
sa			2 3 1 4 5 6
ra			3 1 4 5 6 2
sa			1 3 4 5 6 2
pb			3 4 5 6 2		1
rra			2 3 4 5 6		1
pa			1 2 3 4 5 6
6

/PLAN1		5 4 3 2 1
sa			4 5 3 2 1
rra			1 4 5 3 2
pb			4 5 3 2			1
rra			2 4 5 3			1
pb			4 5 3			2 1
rra			3 4 5			2 1
pa			2 3 4 5			1
pa			1 2 3 4 5
8	1 over limit

/PLAN1		1 2 3 6 5 4
pb			2 3 6 5 4		1
pb			3 6 5 4			2 1
pb			6 5 4			3 2 1
sa			5 6 4			3 2 1
rra			4 5 6			3 2 1
pa			3 4 5 6			2 1
pa			2 3 4 5 6		1
pa			1 2 3 4 5 6
8

/PLAN1		1 2 5 4 3 6
pb			2 5 4 3 6		1
pb			5 4 3 6			2 1
sa			4 5 3 6			2 1
ra?			5 3 6 4			2 1
ra			3 6 4 5			2 1		????????
pb			6 4 5			3 2 1
sa			4 6 5			3 2 1	????????
pb			6 5				4 3 2 1
sa			5 6				4 3 2 1
pa			4 5 6			3 2 1
pa			3 4 5 6			2 1
pa			2 3 4 5 6		1
pa			1 2 3 4 5 6
14		limit + 4!!!!

/TRYING		

Optimal Solutions:
/push_swap	5 4 3 2 1
sa			4 5 3 2 1
rra			1 4 5 3 2
pb			4 5 3 2			1
ra			5 3 2 4			1
ra			3 2 4 5			1
sa			2 3 4 5			1
pa			1 2 3 4 5
7

/push_swap	1 2 3 6 5 4
pb			2 3 6 5 4		1
pb			3 6 5 4			2 1
pb			6 5 4			3 2 1
sa			5 6 4			3 2 1
rra			4 5 6			3 2 1
pa			3 4 5 6			2 1
pa			2 3 4 5 6		1
pa			1 2 3 4 5 6
8

/push_swap	1 2 5 4 3 6
pb			2 5 4 3 6		1
sa			5 2 4 3 6		1
rra			6 5 2 4 3		1
sa			5 6 2 4 3		1
rra			3 5 6 2 4		1
rra			4 3 5 6 2		1
sa			3 4 5 6 2		1
rra			2 3 4 5 6		1
pa			1 2 3 4 5 6
10

/push_swap	1 4 3 2 5 6
pb			4 3 2 5 6		1
sa			3 4 2 5 6		1
pb			4 2 5 6			3 1
sa			2 4 5 6			3 1
pa			3 2 4 5 6		1
sa			2 3 4 5 6		1
pa			1 2 3 4 5 6

/push_swap	3 2 1 4 5 6
sa			2 3 1 4 5 6
pb			3 1 4 5 6		2
sa			1 3 4 5 6		2
pa			2 1 3 4 5 6
sa			1 2 3 4 5 6

/push_swap	1 2 6 5 4 3
pb			2 6 5 4 3		1
pb			6 5 4 3			2 1
sa			5 6 4 3			2 1
ra			6 4 3 5			2 1
ra			4 3 5 6			2 1
sa			3 4 5 6			2 1
pa			2 3 4 5 6		1
pa			1 2 3 4 5 6

/push_swap	1 5 4 3 2 6
sa			5 1 4 3 2 6
rra			6 5 1 4 3 2
sa			5 6 1 4 3 2
rra			2 5 6 1 4 3
pb			5 6 1 4 3		2
rra			3 5 6 1 4		2
rra			4 3 5 6 1		2
sa			3 4 5 6 1		2
pa			2 3 4 5 6 1
rra			1 2 3 4 5 6

/push_swap	4 3 2 1 5 6
sa			3 4 2 1 5 6
pb			4 2 1 5 6		3
sa			2 4 1 5 6		3
pb			4 1 5 6			2 3
sa			1 4 5 6			2 3
rr			4 5 6 1			3 2
pa			3 4 5 6 1		2
pa			2 3 4 5 6 1
rra			1 2 3 4 5 6

/push_swap	1 2 3 4 6 5 7 8
pb			2 3 4 6 5 7 8		1
pb			3 4 6 5 7 8			2 1
pb			4 6 5 7 8			3 2 1
pb			6 5 7 8				4 3 2 1
sa			5 6 7 8				4 3 2 1
pa			4 5 6 7 8			3 2 1
pa			3 4 5 6 7 8			2 1
pa			2 3 4 5 6 7 8		1
pa			1 2 3 4 5 6 7 8

/push_swap	1 3 2 4 6 5 7
pb			3 2 4 6 5 7			1
pb			2 4 6 5 7			3 1
pb			4 6 5 7				2 3 1
ra			6 5 7 4				2 3 1
ss			5 6 7 4				3 2 1
rra			4 5 6 7				3 2 1
pa			3 4 5 6 7			2 1
pa			2 3 4 5 6 7			1
pa			1 2 3 4 5 6 7